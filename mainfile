{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "mainfile.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jenny931224/Independent_Study/new/main/mainfile.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "05DM-8JJ_q1_"
      },
      "source": [
        "#Contains SVM, KNN, DT and RF classification methods"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8we8xtQ49NtM"
      },
      "source": [
        "## Importing Libraries"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8abz7EoxKwfC"
      },
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a5OrqEkz9TrW"
      },
      "source": [
        "### Uploading Dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d2QwLuT-LB0H"
      },
      "source": [
        "newData=pd.read_csv('mainData.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 808
        },
        "id": "p_QeeWfm89hP",
        "outputId": "5a99e3a9-083d-4e70-8b19-0bd5026d3625"
      },
      "source": [
        "newData"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Gender</th>\n",
              "      <th>Level/Year</th>\n",
              "      <th>Age</th>\n",
              "      <th>Your cumulative average (GPA)</th>\n",
              "      <th>Before COVID-19: Which of the following digital tools do you usually use?</th>\n",
              "      <th>After COVID-19: Which of the following digital tools do you usually use?</th>\n",
              "      <th>Before COVID-19: How much time do you spend using the digital tools in learning?</th>\n",
              "      <th>After COVID-19: How much time do you spend using the digital tools in learning?</th>\n",
              "      <th>Before COVID-19: I always use digital tools (mobile, laptop, i-pad) in studying.</th>\n",
              "      <th>After COVID-19: I always use digital tools (mobile, laptop, i-pad) in studying.</th>\n",
              "      <th>Before COVID-19: When I use the mobile phone, tablet or laptop in e-learning, I cannot concentrate and I am distracted.</th>\n",
              "      <th>After COVID-19: When I use the mobile phone, tablet or laptop in e-learning, I cannot concentrate and I am distracted.</th>\n",
              "      <th>Before COVID-19: I have fixed hours for bedtime and wake-up.</th>\n",
              "      <th>After COVID-19: I have fixed hours for bedtime and wake-up.</th>\n",
              "      <th>Before COVID-19: Prolonged use of digital tools for learning (mobile, laptop, i-pad) affected my sleeping habits.</th>\n",
              "      <th>After COVID-19: Prolonged use of digital tools for learning (mobile, laptop, i-pad) affected my sleeping habits.</th>\n",
              "      <th>Before COVID-19: Continuous exposure to electronic screens in online learning is tiring and exhausting</th>\n",
              "      <th>After COVID-19: Continuous exposure to electronic screens in online learning is tiring and exhausting</th>\n",
              "      <th>The distance learning system, caused by the COVID-19 epidemic, resulted in social distancing.</th>\n",
              "      <th>Prolonged use of digital tools (mobile, laptop, i-pad) causes students’ isolation</th>\n",
              "      <th>University learning contributes to strengthening the social personality of students.</th>\n",
              "      <th>Staying home for long periods of time leads to lethargy and laziness.</th>\n",
              "      <th>Prolonged use of e-learning tools often leads to boredom, nervousness, and tension.</th>\n",
              "      <th>The psychological element is a key factor in the success of the educational process.</th>\n",
              "      <th>Some students cannot afford buying all necessary digital tools, which is embarrassing and frustrating.</th>\n",
              "      <th>I don’t recommend continuing with the online learning model because it is socially and psychologically unhealthy.</th>\n",
              "      <th>Measures of lockdown, closures, and quarantine, brought by COVID-19 caused stress, frustration, and depression.</th>\n",
              "      <th>The volume of assignments via e-learning led to confusion, frustration and poor performance.</th>\n",
              "      <th>Face-to-face interaction contributes significantly to boosting students’ academic achievement.</th>\n",
              "      <th>Taking quizzes and exams online from home was not comfortable and made me nervous.</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Female</td>\n",
              "      <td>Second/ Sophomore</td>\n",
              "      <td>18-24</td>\n",
              "      <td>80-89 / 3-3.49</td>\n",
              "      <td>Mobile phone</td>\n",
              "      <td>Laptop</td>\n",
              "      <td>6-9</td>\n",
              "      <td>9-12</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree\\t</td>\n",
              "      <td>Agree\\t</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Male</td>\n",
              "      <td>Other</td>\n",
              "      <td>+30</td>\n",
              "      <td>+90 / +3.5</td>\n",
              "      <td>Laptop</td>\n",
              "      <td>Laptop</td>\n",
              "      <td>1-3</td>\n",
              "      <td>3-6</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Agree\\t</td>\n",
              "      <td>Uncertain\\t</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Uncertain\\t</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Disagree</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Female</td>\n",
              "      <td>First/Freshman</td>\n",
              "      <td>18-24</td>\n",
              "      <td>+90 / +3.5</td>\n",
              "      <td>Other</td>\n",
              "      <td>Mobile phone</td>\n",
              "      <td>1-3</td>\n",
              "      <td>3-6</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Disagree</td>\n",
              "      <td>Strongly Disagree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Male</td>\n",
              "      <td>Second/ Sophomore</td>\n",
              "      <td>18-24</td>\n",
              "      <td>70-79 / 2.5-299</td>\n",
              "      <td>Laptop</td>\n",
              "      <td>Laptop</td>\n",
              "      <td>6-9</td>\n",
              "      <td>1-3</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Uncertain\\t</td>\n",
              "      <td>Strongly Disagree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Uncertain</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Male</td>\n",
              "      <td>Third/Junior</td>\n",
              "      <td>18-24</td>\n",
              "      <td>70-79 / 2.5-299</td>\n",
              "      <td>Laptop</td>\n",
              "      <td>Laptop</td>\n",
              "      <td>1-3</td>\n",
              "      <td>1-3</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Agree\\t</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Uncertain\\t</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Disagree</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>796</th>\n",
              "      <td>Male</td>\n",
              "      <td>Fourth</td>\n",
              "      <td>18-24</td>\n",
              "      <td>80-89</td>\n",
              "      <td>Mobile Phone</td>\n",
              "      <td>Laptop</td>\n",
              "      <td>1-3</td>\n",
              "      <td>3-6</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>797</th>\n",
              "      <td>Male</td>\n",
              "      <td>Fourth</td>\n",
              "      <td>18-24</td>\n",
              "      <td>80-89</td>\n",
              "      <td>Laptop</td>\n",
              "      <td>Laptop</td>\n",
              "      <td>1-3</td>\n",
              "      <td>6-9</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Uncertain</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>798</th>\n",
              "      <td>Male</td>\n",
              "      <td>First</td>\n",
              "      <td>18-24</td>\n",
              "      <td>Below 60</td>\n",
              "      <td>Laptop</td>\n",
              "      <td>Mobile Phone</td>\n",
              "      <td>1-3</td>\n",
              "      <td>1-3</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>799</th>\n",
              "      <td>Male</td>\n",
              "      <td>Fourth</td>\n",
              "      <td>18-24</td>\n",
              "      <td>80-89</td>\n",
              "      <td>Mobile Phone</td>\n",
              "      <td>Laptop</td>\n",
              "      <td>1-3</td>\n",
              "      <td>3-6</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Disagree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>800</th>\n",
              "      <td>Female</td>\n",
              "      <td>Third</td>\n",
              "      <td>18-24</td>\n",
              "      <td>70-79</td>\n",
              "      <td>Mobile Phone</td>\n",
              "      <td>Personal Computer</td>\n",
              "      <td>1-3</td>\n",
              "      <td>3-6</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Disagree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>801 rows × 30 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     Gender  ... Taking quizzes and exams online from home was not comfortable and made me nervous.\n",
              "0    Female  ...                                     Strongly Agree                                \n",
              "1      Male  ...                                           Disagree                                \n",
              "2    Female  ...                                     Strongly Agree                                \n",
              "3      Male  ...                                          Uncertain                                \n",
              "4      Male  ...                                           Disagree                                \n",
              "..      ...  ...                                                ...                                \n",
              "796    Male  ...                                     Strongly Agree                                \n",
              "797    Male  ...                                          Uncertain                                \n",
              "798    Male  ...                                     Strongly Agree                                \n",
              "799    Male  ...                                              Agree                                \n",
              "800  Female  ...                                              Agree                                \n",
              "\n",
              "[801 rows x 30 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6JdeRMaiOTof"
      },
      "source": [
        "newData=newData.dropna(axis=0) ###Droping null values"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7kAVnhCsYnh3",
        "outputId": "91ebd80f-c765-4068-9987-acd07d092505"
      },
      "source": [
        "pip install category_encoders  ###Installing dependecies "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: category_encoders in /usr/local/lib/python3.7/dist-packages (2.2.2)\n",
            "Requirement already satisfied: statsmodels>=0.9.0 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (0.10.2)\n",
            "Requirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (0.22.2.post1)\n",
            "Requirement already satisfied: pandas>=0.21.1 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (1.1.5)\n",
            "Requirement already satisfied: numpy>=1.14.0 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (1.19.5)\n",
            "Requirement already satisfied: patsy>=0.5.1 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (0.5.1)\n",
            "Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from category_encoders) (1.4.1)\n",
            "Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.20.0->category_encoders) (1.0.1)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.21.1->category_encoders) (2018.9)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.21.1->category_encoders) (2.8.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from patsy>=0.5.1->category_encoders) (1.15.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K8q4mCJuXDYt",
        "outputId": "a22d66ea-b5be-4205-f210-8c55ac0111b0"
      },
      "source": [
        "newData['Your cumulative average (GPA)'].unique()  ###Target Value"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['80-89 / 3-3.49', '+90 / +3.5', '70-79 / 2.5-299', '60-69 / 2-2.9',\n",
              "       '60-69 / 2-2.49', 'Below 60 / Below 2.0', '60-69', '80-89', '+90',\n",
              "       '70-79', 'Below 60'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vcA1zlI54msn"
      },
      "source": [
        "\n",
        "# sns.heatmap(newData.isnull(), cbar=False) ###Check for null values"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "248-a4YH9oon"
      },
      "source": [
        "##Correaltion Heatmap"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7BtANaJfm40i"
      },
      "source": [
        "# sns.set(style=\"white\")\n",
        "# # Create a covariance matrix\n",
        "# corr = newData.corr()\n",
        "# # Creating a mask the size of our covariance matrix\n",
        "# mask = np.zeros_like(corr, dtype=bool)\n",
        "# mask[np.triu_indices_from(mask)] = True\n",
        "# # Set up the matplotlib figure\n",
        "# f, ax = plt.subplots(figsize=(40,40))\n",
        "# # Generate a custom diverging colormap\n",
        "# cmap = sns.diverging_palette(220,10,as_cmap=True)\n",
        "# # Draw the heatmap with the mask and correct aspect ratio\n",
        "# sns.heatmap(corr,mask=mask,cmap=cmap,vmax=1,center=0,square=True, \n",
        "#             linewidth=.5, cbar_kws={'shrink': .5}, annot=True)\n",
        "# # ax.set_title('Multi-Collinearity of Features')\n",
        "# # plt.savefig('correlation2.png')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7OBY661oVfIU"
      },
      "source": [
        "\n",
        "\n",
        "\n",
        "\n",
        "## Encoding Values"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L690ASFVUiOi"
      },
      "source": [
        "import category_encoders as ce\n",
        "encoder= ce.OrdinalEncoder(cols=['Your cumulative average (GPA)'],return_df=True,\n",
        "                           mapping=[{'col':'Your cumulative average (GPA)',\n",
        "'mapping':{'Below 60 / Below 2.0':0,'60-69 / 2-2.49':1,'60-69 / 2-2.9':1, '70-79 / 2.5-299':2, '80-89 / 3-3.49':3,'+90 / +3.5':4, '60-69':1, '80-89':3, '+90':4,\n",
        "       '70-79':2, 'Below 60':0}}])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jy8T1mdnYjiz",
        "outputId": "adf5692b-a985-4f5d-a3c4-49e994dbaf5b"
      },
      "source": [
        "newData=encoder.fit_transform(newData)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/category_encoders/utils.py:21: FutureWarning: is_categorical is deprecated and will be removed in a future version.  Use is_categorical_dtype instead\n",
            "  elif pd.api.types.is_categorical(cols):\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_Nh3AyfAYz_7"
      },
      "source": [
        "newData['Male']=newData['Gender'].map({'Male':1, 'Female':0})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YeiNKqbRZnr0"
      },
      "source": [
        "newData=newData.drop(['Gender'], axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EyBG9VsI5uVB"
      },
      "source": [
        "tikna={'Fourth':'Fourth/Senior', 'Third':'Third/Junior', 'Second':'Second/ Sophomore', 'First':'First/Freshman'}\n",
        "newData=newData.replace(tikna)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Gtd0SYhWjih5"
      },
      "source": [
        "dummy=pd.get_dummies(data=newData['Level/Year'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KMMi7lANkWjz"
      },
      "source": [
        "newData=pd.concat([newData, dummy], axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JeFNmwAXoiLe"
      },
      "source": [
        "newData=newData.drop(['Level/Year'], axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t7uVsRCXozDg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6a81f15d-4279-4eb9-92db-0d49e1c6cc02"
      },
      "source": [
        "# newData.head(1)\n",
        "newData['Age'].unique()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['18-24', '+30', '25-30'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pQ097YmDFSdc"
      },
      "source": [
        "ageDummy=pd.get_dummies(data=newData['Age'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aw8iN0ERFiIs"
      },
      "source": [
        "newData=pd.concat([newData, ageDummy], axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NPDYboXsFmbA"
      },
      "source": [
        "newData=newData.drop(['Age'], axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_48ePiLZFv0K"
      },
      "source": [
        "toolBeforeDummy=pd.get_dummies(data=newData['Before COVID-19: Which of the following digital tools do you usually use?'], prefix='before')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ECVdpz9oGQCC"
      },
      "source": [
        "newData=pd.concat([newData, toolBeforeDummy], axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sROW-oOLGUay"
      },
      "source": [
        "newData=newData.drop('Before COVID-19: Which of the following digital tools do you usually use?', axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wasyyGkQV_FJ",
        "outputId": "d4df34d8-2da5-4229-bc67-f84d333ac50a"
      },
      "source": [
        "newData['Before COVID-19: How much time do you spend using the digital tools in learning?'].unique()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['6-9', '1-3 ', '3-6', '9-12', '+12', '1-3'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jM8GUIgEmg78"
      },
      "source": [
        "afterDummy=pd.get_dummies(data=newData['After COVID-19: Which of the following digital tools do you usually use?'], prefix='after')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cbl1Y0C2WxrL"
      },
      "source": [
        "newData=pd.concat([newData, afterDummy], axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RboQm8ELW3CV"
      },
      "source": [
        "newData=newData.drop(['After COVID-19: Which of the following digital tools do you usually use?'], axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lCBNCBH8b2AX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 791
        },
        "outputId": "926a0061-6964-4c0b-e1a4-bf6b1b6efc41"
      },
      "source": [
        "newData"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Your cumulative average (GPA)</th>\n",
              "      <th>Before COVID-19: How much time do you spend using the digital tools in learning?</th>\n",
              "      <th>After COVID-19: How much time do you spend using the digital tools in learning?</th>\n",
              "      <th>Before COVID-19: I always use digital tools (mobile, laptop, i-pad) in studying.</th>\n",
              "      <th>After COVID-19: I always use digital tools (mobile, laptop, i-pad) in studying.</th>\n",
              "      <th>Before COVID-19: When I use the mobile phone, tablet or laptop in e-learning, I cannot concentrate and I am distracted.</th>\n",
              "      <th>After COVID-19: When I use the mobile phone, tablet or laptop in e-learning, I cannot concentrate and I am distracted.</th>\n",
              "      <th>Before COVID-19: I have fixed hours for bedtime and wake-up.</th>\n",
              "      <th>After COVID-19: I have fixed hours for bedtime and wake-up.</th>\n",
              "      <th>Before COVID-19: Prolonged use of digital tools for learning (mobile, laptop, i-pad) affected my sleeping habits.</th>\n",
              "      <th>After COVID-19: Prolonged use of digital tools for learning (mobile, laptop, i-pad) affected my sleeping habits.</th>\n",
              "      <th>Before COVID-19: Continuous exposure to electronic screens in online learning is tiring and exhausting</th>\n",
              "      <th>After COVID-19: Continuous exposure to electronic screens in online learning is tiring and exhausting</th>\n",
              "      <th>The distance learning system, caused by the COVID-19 epidemic, resulted in social distancing.</th>\n",
              "      <th>Prolonged use of digital tools (mobile, laptop, i-pad) causes students’ isolation</th>\n",
              "      <th>University learning contributes to strengthening the social personality of students.</th>\n",
              "      <th>Staying home for long periods of time leads to lethargy and laziness.</th>\n",
              "      <th>Prolonged use of e-learning tools often leads to boredom, nervousness, and tension.</th>\n",
              "      <th>The psychological element is a key factor in the success of the educational process.</th>\n",
              "      <th>Some students cannot afford buying all necessary digital tools, which is embarrassing and frustrating.</th>\n",
              "      <th>I don’t recommend continuing with the online learning model because it is socially and psychologically unhealthy.</th>\n",
              "      <th>Measures of lockdown, closures, and quarantine, brought by COVID-19 caused stress, frustration, and depression.</th>\n",
              "      <th>The volume of assignments via e-learning led to confusion, frustration and poor performance.</th>\n",
              "      <th>Face-to-face interaction contributes significantly to boosting students’ academic achievement.</th>\n",
              "      <th>Taking quizzes and exams online from home was not comfortable and made me nervous.</th>\n",
              "      <th>Male</th>\n",
              "      <th>First/Freshman</th>\n",
              "      <th>Fourth/Senior</th>\n",
              "      <th>Other</th>\n",
              "      <th>Second/ Sophomore</th>\n",
              "      <th>Third/Junior</th>\n",
              "      <th>+30</th>\n",
              "      <th>18-24</th>\n",
              "      <th>25-30</th>\n",
              "      <th>before_I pad/ Tablet</th>\n",
              "      <th>before_Laptop</th>\n",
              "      <th>before_Mobile Phone</th>\n",
              "      <th>before_Mobile phone</th>\n",
              "      <th>before_Other</th>\n",
              "      <th>before_Personal Computer</th>\n",
              "      <th>after_I pad/ Tablet</th>\n",
              "      <th>after_Laptop</th>\n",
              "      <th>after_Mobile Phone</th>\n",
              "      <th>after_Mobile phone</th>\n",
              "      <th>after_Other</th>\n",
              "      <th>after_Personal Computer</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "      <td>6-9</td>\n",
              "      <td>9-12</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree\\t</td>\n",
              "      <td>Agree\\t</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "      <td>1-3</td>\n",
              "      <td>3-6</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Agree\\t</td>\n",
              "      <td>Uncertain\\t</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Uncertain\\t</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4</td>\n",
              "      <td>1-3</td>\n",
              "      <td>3-6</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Disagree</td>\n",
              "      <td>Strongly Disagree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>6-9</td>\n",
              "      <td>1-3</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Uncertain\\t</td>\n",
              "      <td>Strongly Disagree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>1-3</td>\n",
              "      <td>1-3</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Agree\\t</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Uncertain\\t</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>796</th>\n",
              "      <td>3</td>\n",
              "      <td>1-3</td>\n",
              "      <td>3-6</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>797</th>\n",
              "      <td>3</td>\n",
              "      <td>1-3</td>\n",
              "      <td>6-9</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>798</th>\n",
              "      <td>0</td>\n",
              "      <td>1-3</td>\n",
              "      <td>1-3</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Disagree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>799</th>\n",
              "      <td>3</td>\n",
              "      <td>1-3</td>\n",
              "      <td>3-6</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Disagree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>800</th>\n",
              "      <td>2</td>\n",
              "      <td>1-3</td>\n",
              "      <td>3-6</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Disagree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>Strongly agree</td>\n",
              "      <td>Uncertain</td>\n",
              "      <td>Strongly Agree</td>\n",
              "      <td>Agree</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>785 rows × 46 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     Your cumulative average (GPA)  ... after_Personal Computer\n",
              "0                                3  ...                       0\n",
              "1                                4  ...                       0\n",
              "2                                4  ...                       0\n",
              "3                                2  ...                       0\n",
              "4                                2  ...                       0\n",
              "..                             ...  ...                     ...\n",
              "796                              3  ...                       0\n",
              "797                              3  ...                       0\n",
              "798                              0  ...                       0\n",
              "799                              3  ...                       0\n",
              "800                              2  ...                       1\n",
              "\n",
              "[785 rows x 46 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aQZlCUV6RSXH",
        "outputId": "2d1c681a-2d1b-4d07-94f8-cee96bda10ea"
      },
      "source": [
        "newData['Before COVID-19: How much time do you spend using the digital tools in learning?'].unique()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['6-9', '1-3 ', '3-6', '9-12', '+12', '1-3'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g3C0W-JMRSTL",
        "outputId": "c132b36a-a05e-44e3-8608-846b00f944db"
      },
      "source": [
        "\n",
        "newData['The distance learning system, caused by the COVID-19 epidemic, resulted in social distancing.'].unique()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Agree\\t', 'Strongly Agree', 'Uncertain\\t', 'Strongly Disagree',\n",
              "       'Disagree', 'Agree', 'Uncertain'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WtLKuxbNRSNE",
        "outputId": "f60139af-0705-458c-d33f-c6593ae7cb37"
      },
      "source": [
        "\n",
        "newData['Before COVID-19: How much time do you spend using the digital tools in learning?'].unique()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['6-9', '1-3 ', '3-6', '9-12', '+12', '1-3'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q_l27_7kRSGG",
        "outputId": "9db408e4-2063-4113-affc-3883a7de53a0"
      },
      "source": [
        "newData['Prolonged use of e-learning tools often leads to boredom, nervousness, and tension.'].unique()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Agree', 'Disagree', 'Strongly Agree', 'Uncertain',\n",
              "       'Strongly agree'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y4emSZq3e7RW"
      },
      "source": [
        "inigma={'Strongly Disagree':0, 'Disagree':1, 'Uncertain\\t':2, 'Agree\\t':3, 'Strongly Agree':4, 'Agree':3, 'Uncertain':2, 'Strongly agree':4,'Strongly disagree':0 }\n",
        "fugma={'3-6':1, '6-9':2, '9-12':3, '+12':4, '1-3':0, '1-3 ':0}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QBav50q4gTWt"
      },
      "source": [
        "newData=newData.replace(inigma)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bPBLwRfFUNS5"
      },
      "source": [
        "newData=newData.replace(fugma)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1PabLs7wkDc0"
      },
      "source": [
        "newData=newData.dropna(axis=0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n-xuRee9kTIz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 433
        },
        "outputId": "19c62b0d-eb87-4040-e73e-774d2b9ec9f4"
      },
      "source": [
        "newData.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Your cumulative average (GPA)</th>\n",
              "      <th>Before COVID-19: How much time do you spend using the digital tools in learning?</th>\n",
              "      <th>After COVID-19: How much time do you spend using the digital tools in learning?</th>\n",
              "      <th>Before COVID-19: I always use digital tools (mobile, laptop, i-pad) in studying.</th>\n",
              "      <th>After COVID-19: I always use digital tools (mobile, laptop, i-pad) in studying.</th>\n",
              "      <th>Before COVID-19: When I use the mobile phone, tablet or laptop in e-learning, I cannot concentrate and I am distracted.</th>\n",
              "      <th>After COVID-19: When I use the mobile phone, tablet or laptop in e-learning, I cannot concentrate and I am distracted.</th>\n",
              "      <th>Before COVID-19: I have fixed hours for bedtime and wake-up.</th>\n",
              "      <th>After COVID-19: I have fixed hours for bedtime and wake-up.</th>\n",
              "      <th>Before COVID-19: Prolonged use of digital tools for learning (mobile, laptop, i-pad) affected my sleeping habits.</th>\n",
              "      <th>After COVID-19: Prolonged use of digital tools for learning (mobile, laptop, i-pad) affected my sleeping habits.</th>\n",
              "      <th>Before COVID-19: Continuous exposure to electronic screens in online learning is tiring and exhausting</th>\n",
              "      <th>After COVID-19: Continuous exposure to electronic screens in online learning is tiring and exhausting</th>\n",
              "      <th>The distance learning system, caused by the COVID-19 epidemic, resulted in social distancing.</th>\n",
              "      <th>Prolonged use of digital tools (mobile, laptop, i-pad) causes students’ isolation</th>\n",
              "      <th>University learning contributes to strengthening the social personality of students.</th>\n",
              "      <th>Staying home for long periods of time leads to lethargy and laziness.</th>\n",
              "      <th>Prolonged use of e-learning tools often leads to boredom, nervousness, and tension.</th>\n",
              "      <th>The psychological element is a key factor in the success of the educational process.</th>\n",
              "      <th>Some students cannot afford buying all necessary digital tools, which is embarrassing and frustrating.</th>\n",
              "      <th>I don’t recommend continuing with the online learning model because it is socially and psychologically unhealthy.</th>\n",
              "      <th>Measures of lockdown, closures, and quarantine, brought by COVID-19 caused stress, frustration, and depression.</th>\n",
              "      <th>The volume of assignments via e-learning led to confusion, frustration and poor performance.</th>\n",
              "      <th>Face-to-face interaction contributes significantly to boosting students’ academic achievement.</th>\n",
              "      <th>Taking quizzes and exams online from home was not comfortable and made me nervous.</th>\n",
              "      <th>Male</th>\n",
              "      <th>First/Freshman</th>\n",
              "      <th>Fourth/Senior</th>\n",
              "      <th>Other</th>\n",
              "      <th>Second/ Sophomore</th>\n",
              "      <th>Third/Junior</th>\n",
              "      <th>+30</th>\n",
              "      <th>18-24</th>\n",
              "      <th>25-30</th>\n",
              "      <th>before_I pad/ Tablet</th>\n",
              "      <th>before_Laptop</th>\n",
              "      <th>before_Mobile Phone</th>\n",
              "      <th>before_Mobile phone</th>\n",
              "      <th>before_Other</th>\n",
              "      <th>before_Personal Computer</th>\n",
              "      <th>after_I pad/ Tablet</th>\n",
              "      <th>after_Laptop</th>\n",
              "      <th>after_Mobile Phone</th>\n",
              "      <th>after_Mobile phone</th>\n",
              "      <th>after_Other</th>\n",
              "      <th>after_Personal Computer</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Your cumulative average (GPA)  ...  after_Personal Computer\n",
              "0                              3  ...                        0\n",
              "1                              4  ...                        0\n",
              "2                              4  ...                        0\n",
              "3                              2  ...                        0\n",
              "4                              2  ...                        0\n",
              "\n",
              "[5 rows x 46 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5NeLHcJyE8me"
      },
      "source": [
        "test1=newData"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pMgxrfjSeiyU"
      },
      "source": [
        "##Data Analysis"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7aM4L7rrekxs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "outputId": "5c4c908b-fb21-4f4f-cf7e-2fe940383b71"
      },
      "source": [
        "fig = plt.figure(figsize=[15,5])\n",
        "plt.tight_layout()\n",
        "for i in range(2):\n",
        "    fig.add_subplot(1,  2, i+1)\n",
        "    sns.kdeplot(data=testData,x=testData.columns[i+1],hue='Your cumulative average (GPA)')\n",
        "    if i == 16:\n",
        "        plt.xlim([-50,300])\n",
        "    sns.despine()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4oAAAE9CAYAAABN3ZwcAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeXic1Xnw/++t0YyWGe27LduS5QXLsi3jBcwWk7KYQlhCE5xAE0oTkrehTZuUK7x5+0soSUqapG3ShCaQZiskBkJI4oBZkoAbMBhsjDF4w7Z2Wda+zIxGmu38/pgF2ZZlSZ7F1tyf69KF5plznueWbXx8zznnPmKMQSmllFJKKaWUikhLdgBKKaWUUkoppc4umigqpZRSSimllDqOJopKKaWUUkoppY6jiaJSSimllFJKqeNooqiUUkoppZRS6jiaKCqllFJKKaWUOk56sgOIlQ0bNphnn3022WEopZRKDEl2AOcSHSOVUiplxGx8nDEzij09PckOQSmllDor6RiplFJqquKaKIrIBhE5KCKHReSeCdrdLCJGRFaPufZ/w/0OisjV8YxTKaWUUkoppdR74rb0VEQswAPAlUAbsENENhtj9p3QLgf4LPDamGu1wEZgKTAL+IOILDLGBOIVr1JKKaWUUkqpkHjOKK4FDhtjGowxXuBR4IZx2n0F+FdgZMy1G4BHjTGjxphG4HD4fkoppZRSSiml4iyexWxmA61jXrcBF4xtICLnA3OMMU+LyN0n9N1+Qt/Z8QpUKXUyn89HW1sbIyMjp2+sVJxkZmZSWVmJ1WpNdihKKRWlY6RKtkSMj0mreioiacC/A7efwT3uBO4EmDt3bmwCU0oB0NbWRk5ODlVVVYhogUmVeMYYent7aWtro7q6OtnhKKVUlI6RKpkSNT7Gc+lpOzBnzOvK8LWIHKAO2CoiTcCFwOZwQZvT9QXAGPOQMWa1MWZ1SUlJjMNXKrWNjIxQVFSkA6BKGhGhqKhIP7FXSp11dIxUyZSo8TGeieIOYKGIVIuIjVBxms2RN40xg8aYYmNMlTGmitBS0+uNMTvD7TaKSIaIVAMLgdfjGKtSahw6AKpk0z+DSqmzlf79pJIpEX/+4pYoGmP8wF3Ac8B+4HFjzF4RuU9Erj9N373A48A+4FngM1rxVKnkMsZwySWX8Mwzz0Sv/fKXv2TDhg1JjOrMVFVVnfZ8uX/5l3857vVFF10Uz5DOWh6Ph/e9730EAqG/ig8dOsR1111HTU0Nq1at4vLLL+dPf/oTAD/96U8pKSmhvr6e2tpafvjDH0bv85vf/AYR4cCBA9Fr3d3d5/SfI6WU0jEyRMfImTVGxvUcRWPMFmPMImNMjTHma+FrXzLGbB6n7frwbGLk9dfC/RYbY545sb1SKrFEhB/84Ad87nOfY2RkBJfLxRe/+EUeeOCBad3PGEMwGIxxlLF34iD4yiuvJCmS04sMUPHw4x//mA9+8INYLBZGRka49tprufPOOzly5AhvvPEG3/3ud2loaIi2v+WWW9i9ezdbt27li1/8Ip2dnQBs2rSJSy65hE2bNkXblpSUUFFRwbZt2+IWv1JKxZOOkSE6Rs6sMTKuiaJSamapq6vjAx/4AP/6r//Kfffdx2233cbnP/95li9fzoUXXsiePXsAuPfee/nWt751XL+mpiaamppYvHgxH/vYx6irq6O1tfW4++/YsYOLLrqIFStWsHbtWpxOJz/96U+56667om2uu+46tm7dCoDD4eDuu+9m6dKlXHHFFbz++uusX7+e+fPns3lz6POoifqPdeONN7Jq1SqWLl3KQw89BMA999yDx+Ohvr6eW2+9NfpMgI0bN/L0009H+99+++088cQTBAIB7r77btasWcPy5ct58MEHx/21HO95P/jBD7j77vcKQI+N/ZFHHmHt2rXU19fzqU99KjrgORwOPv/5z7NixQpeffVV7rvvPtasWUNdXR133nknxpjor+3y5cupr6/n7rvvpq6uDmDS8f785z/nhhtuiH6/bt06rr/+vcUhdXV13H777Sf1Ky0tpaamhubmZlwuFy+//DI/+tGPePTRR0/69fj5z38+7rOVUupcoGOkjpGR72fMGGmMmRFfq1atMiq2gsGgOfjafrPp3ofNvpffSXY4KsH27ds37nWXy2UWLVpk6urqzKc//Wlz7733GmOM+eMf/2hWrFhhjDHmy1/+svnmN78Z7bN06VLT2NhoGhsbjYiYV1999aT7jo6OmurqavP6668bY4wZHBw0Pp/P/OQnPzGf+cxnou2uvfZa8+KLLxpjjAHMli1bjDHG3HjjjebKK680Xq/X7N69OxrLRP3nzZtnuru7jTHG9Pb2GmOMGR4eNkuXLjU9PT3GGGPsdvtxcUZeP/nkk+ZjH/tYNPbKykozPDxsHnzwQfOVr3zFGGPMyMiIWbVqlWloaDjp5x3veV1dXaampibaZsOGDeall14y+/btM9ddd53xer3GGGP+z//5P+ZnP/tZ9NfgscceO+m+xhhz2223mc2bN0d/D1555RVjjDFf+MIXzNKlS40xZlLxjo6OmrKysujrf/iHfzDf/va3T/qZIsb+mh85csSUlJSY3t5e88gjj5g77rjDGGPMunXrzM6dO6N92traTF1d3bj3O8WfxaSPO+fSl46Raip8o17z2/940vzws/9lHv3nh81Q71CyQzrr6BipY+TY35tkjZHxHh+TdjyGOvvt+N1rPP/DLUhaGi17m6lYMIv8soJkh6WSzG63c8stt+BwONi0aRO/+tWvAHj/+99Pb28vQ0NDE/afN28eF1544UnXDx48SEVFBWvWrAEgNzf3tLHYbLbouv1ly5aRkZGB1Wpl2bJlNDU1Tenn+s///E9+/etfA9Da2sqhQ4coKio6ZftrrrmGz372s4yOjvLss89y2WWXkZWVxfPPP8+ePXt44oknABgcHOTQoUMnla8e73kXXngh8+fPZ/v27SxcuJADBw5w8cUX88ADD/DGG29Ef208Hg+lpaUAWCwWbr755uh9X3zxRb7xjW8wPDxMX18fS5cu5dJLL8XpdLJu3ToAPvrRj/LUU08BTCrenp4e8vPzT/lrcdNNN3Ho0CEWLVrEk08+CcBjjz3Gyy+/TEZGBg8++CCFhYVs2rSJz372s0Do0+ZNmzaxatUqIPSp6tGjR0/9G6SUSgi/z88v/+VRjuw6zPyVNTS93cTP/+mnfOz+O8jOsyc7vLOejpEhOka+51weIzVRVOMKBoK89ttXqFwyl+v//ib++++/z1P/+Rtu+9pfJTs0dRZIS0sjLe3UK9fT09OP21sxtnyz3T61f2hMdC+r1Rqt+pWWlkZGRkb0e7/ff9r+EVu3buUPf/gDr776KtnZ2axfv/60JaczMzNZv349zz33HI899hgbN24EQqs0vvvd73L11Vefsu9Ez9u4cSOPP/445513HjfddBMigjGGj3/849x///3jxmGxWKI/29/8zd+wc+dO5syZw7333nvan2My8WZlZR13n6VLl0Y35QP8+te/ZufOnfzjP/5j9Nott9zC9773vejrvr4+XnjhBd5++21E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\n",
            "text/plain": [
              "<Figure size 1080x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zMBdQinKctT0"
      },
      "source": [
        "plt.figure(figsize=(10,10))\n",
        "gplot=sns.countplot(data=testData, x='Your cumulative average (GPA)')\n",
        "for p in gplot.patches:\n",
        "    gplot.annotate(format(p.get_height(), '.1f'), \n",
        "                   (p.get_x() + p.get_width() / 2., p.get_height()), \n",
        "                   ha = 'center', va = 'center', \n",
        "                   xytext = (0, 9), \n",
        "                   textcoords = 'offset points')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2TypxzIFzJfW"
      },
      "source": [
        "## Dropping certain columns"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jlVmKe-hzOjq"
      },
      "source": [
        "newData=newData.drop(['after_Laptop', 'Third/Junior'], axis=1) ## Based on the correaltion coefficients. Closer the value to 0, lesser effect it is having on the target value. This is done is order to prevent overfitting."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CX22ihTw2UQA"
      },
      "source": [
        "newData=newData.dropna(axis=0)  ##Dropping null values again"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_0YU7xkauVtG"
      },
      "source": [
        "# newData"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6YDuO-Nq2cyr"
      },
      "source": [
        "##Corelation Cofficient Values "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uEYauOX12b0h"
      },
      "source": [
        "newDataCorr=newData.corr()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9J3Yk7vJ2UGt"
      },
      "source": [
        "newDataCorr.nlargest(10, ['Your cumulative average (GPA)']) ##10 Largest values (can change number)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MBOeQwIb2UBL"
      },
      "source": [
        "newDataCorr.nsmallest(20, ['Your cumulative average (GPA)']) ##20 smallest values (can change number)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LuebsuF-k7D5"
      },
      "source": [
        "# Data Mining "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZYTqgckeXGhE",
        "outputId": "ade6421c-1c9a-4f6f-96e1-45596c0b068b"
      },
      "source": [
        "pip install -U imbalanced-learn ##Installing dependency for SMOTE"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already up-to-date: imbalanced-learn in /usr/local/lib/python3.7/dist-packages (0.8.0)\n",
            "Requirement already satisfied, skipping upgrade: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from imbalanced-learn) (1.0.1)\n",
            "Requirement already satisfied, skipping upgrade: numpy>=1.13.3 in /usr/local/lib/python3.7/dist-packages (from imbalanced-learn) (1.19.5)\n",
            "Requirement already satisfied, skipping upgrade: scikit-learn>=0.24 in /usr/local/lib/python3.7/dist-packages (from imbalanced-learn) (0.24.1)\n",
            "Requirement already satisfied, skipping upgrade: scipy>=0.19.1 in /usr/local/lib/python3.7/dist-packages (from imbalanced-learn) (1.4.1)\n",
            "Requirement already satisfied, skipping upgrade: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.24->imbalanced-learn) (2.1.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rQq-bJQOa0d2",
        "outputId": "033f9aed-c921-4618-c3df-cfc644de60c6"
      },
      "source": [
        "import imblearn\n",
        "print(imblearn.__version__) #Import Library and check version"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.8.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tDPNdqRS7aQl"
      },
      "source": [
        "###Test & Train Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MxdVun14bvdf"
      },
      "source": [
        "testData=newData[newData['Your cumulative average (GPA)']>0] ##Removing CGPA scores of the less than 60 or '0' as there are only 4 rows"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zli4_rWjxQA1"
      },
      "source": [
        "testData"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WAKvdViBDQv0"
      },
      "source": [
        "X=testData.iloc[:, 1:]\n",
        "y=testData.iloc[:, [0]] #Dividing the datset into parameters columns (X) and target value (y)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m_uxR_S2bMwa"
      },
      "source": [
        "oversample = SMOTE()\n",
        "X, y = oversample.fit_resample(X, y) ##Applying SMOTE to get rid of class imbalance"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "81zt2aS2DEFN"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.multiclass import OneVsRestClassifier\n",
        "from sklearn.multiclass import OneVsOneClassifier\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, shuffle=True) ##Train test split\n",
        "# cv = KFold(n_splits=10, random_state=1, shuffle=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "02-vaiHVABFk"
      },
      "source": [
        "## Classification methods"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V-4xvvGKlBBf"
      },
      "source": [
        "##SVM"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aargoFzQkkwP",
        "outputId": "76a47b48-aada-48b1-c7fc-5cc5fa2e2c9d"
      },
      "source": [
        "from sklearn.svm import SVC\n",
        "model=SVC()\n",
        "ovo = OneVsOneClassifier(model) ##Used for multiclass classification\n",
        "# ovr.fit(X_train, y_train)\n",
        "ovo.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:63: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  return f(*args, **kwargs)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "OneVsOneClassifier(estimator=SVC())"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 272
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MDtGQCVsmfHW"
      },
      "source": [
        "prd=ovo.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HX-qDjUNmhdk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ad487edf-303f-4499-eb7b-be79d3462b8f"
      },
      "source": [
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "print(confusion_matrix(prd, y_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[141  41  31  32]\n",
            " [ 22  85  42  27]\n",
            " [ 25  58  96  29]\n",
            " [ 20  25  25  93]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Pty8q0MGklH",
        "outputId": "10dd2dfb-d37b-4f24-9f26-130d835e7e71"
      },
      "source": [
        "print(classification_report(prd,y_test)) ## May come diffrent on your device, depending on sklearn version or inbuilt random number that model assigns to training set"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.68      0.58      0.62       245\n",
            "           2       0.41      0.48      0.44       176\n",
            "           3       0.49      0.46      0.48       208\n",
            "           4       0.51      0.57      0.54       163\n",
            "\n",
            "    accuracy                           0.52       792\n",
            "   macro avg       0.52      0.52      0.52       792\n",
            "weighted avg       0.54      0.52      0.53       792\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OiYrpXhnn2v-"
      },
      "source": [
        "##Decision Tree"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vNypK1TAmtJO",
        "outputId": "deb01aa9-c9b1-45c1-a38a-fba93888f884"
      },
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "dtree=DecisionTreeClassifier()\n",
        "# dtree.fit(X_train, y_train)\n",
        "ovo = OneVsOneClassifier(model)\n",
        "# ovr.fit(X_train, y_train)\n",
        "ovo.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:63: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  return f(*args, **kwargs)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "OneVsOneClassifier(estimator=SVC())"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 283
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lSbdiRndm_CD"
      },
      "source": [
        "pred=ovo.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DeZ7amQkoA-z",
        "outputId": "a25f8bb4-0a87-45dc-b4fe-546217cf54d1"
      },
      "source": [
        "print(classification_report(y_test, pred))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.58      0.68      0.62       208\n",
            "           2       0.48      0.41      0.44       209\n",
            "           3       0.46      0.49      0.48       194\n",
            "           4       0.57      0.51      0.54       181\n",
            "\n",
            "    accuracy                           0.52       792\n",
            "   macro avg       0.52      0.52      0.52       792\n",
            "weighted avg       0.52      0.52      0.52       792\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lLyBLhY2oH9E"
      },
      "source": [
        "##Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "POcafyX8oDSh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "49e71efc-626c-463e-f554-73a4dcc71361"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "rd=RandomForestClassifier(n_estimators=200) # Can change value \n",
        "# rd.fit(X_train, y_train)\n",
        "# rd_pred=rd.predict(X_test)\n",
        "ovo = OneVsOneClassifier(model)\n",
        "# ovr.fit(X_train, y_train)\n",
        "ovo.fit(X_train, y_train)\n",
        "rd_pred=ovo.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:63: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  return f(*args, **kwargs)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L-lAqUEnoQph",
        "outputId": "15f53131-fc1e-43d1-c7f5-59714407972b"
      },
      "source": [
        "print(classification_report(rd_pred, y_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.68      0.58      0.62       245\n",
            "           2       0.41      0.48      0.44       176\n",
            "           3       0.49      0.46      0.48       208\n",
            "           4       0.51      0.57      0.54       163\n",
            "\n",
            "    accuracy                           0.52       792\n",
            "   macro avg       0.52      0.52      0.52       792\n",
            "weighted avg       0.54      0.52      0.53       792\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zgBycz4MuJoi"
      },
      "source": [
        "##KNN"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Scc94NUWuIQf"
      },
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "neigh = KNeighborsClassifier(n_neighbors=15)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HfBNovYLtw1Z",
        "outputId": "1c36ed3d-2a72-44fa-bacd-641f253abe27"
      },
      "source": [
        "# neigh.fit(X_train, y_train)\n",
        "ovo = OneVsOneClassifier(neigh)\n",
        "# ovr.fit(X_train, y_train)\n",
        "ovo.fit(X_train, y_train)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:63: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  return f(*args, **kwargs)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "OneVsOneClassifier(estimator=KNeighborsClassifier(n_neighbors=15))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 292
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CaUgZoYNuRfF"
      },
      "source": [
        "y_pred=ovo.predict(X_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WRFsLlqRuX2K",
        "outputId": "25100440-03a2-436b-c13a-d7efa22b7cb8"
      },
      "source": [
        "print(classification_report(y_pred, y_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           1       0.91      0.62      0.74       306\n",
            "           2       0.48      0.65      0.55       155\n",
            "           3       0.43      0.68      0.53       124\n",
            "           4       0.75      0.66      0.70       207\n",
            "\n",
            "    accuracy                           0.64       792\n",
            "   macro avg       0.64      0.65      0.63       792\n",
            "weighted avg       0.71      0.64      0.66       792\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}
